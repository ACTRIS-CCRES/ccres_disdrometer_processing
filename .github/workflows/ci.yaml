name: CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "*.rst"
      - ".readthedocs.yaml"

  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "*.rst"
      - ".readthedocs.yaml"

jobs:
  pre-commit:
    name: Run pre-commit
    # This is the VM in which github run
    # We can use a custom container that will
    # be run in this VM
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install gfortran

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache python environment
        uses: actions/cache@v3
        # https://tobiasmcnulty.com/posts/caching-pre-commit/
        # This restore and/or save in the same action
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.10-venv-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        # https://stackoverflow.com/q/76292039
        run: |
          python -m pip install numpy wheel
          python -m pip install -U .[dev]

      - name: Cache pre-commits
        id: cache-pre-commits
        # https://tobiasmcnulty.com/posts/caching-pre-commit/
        # This restore and/or save in the same actions
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install pre-commits
        # https://github.com/actions/cache#restoring-and-saving-cache-using-a-single-action
        if: steps.cache-pre-commits.outputs.cache-hit != 'true'
        run: pre-commit install

      - name: Compute pre-commit cache key
        run: |
          pre-commit run --all-files

  multi-os-tests:
    if: ( github.ref == format('refs/heads/{0}', github.event.repository.default_branch) ) || startsWith(github.ref, 'refs/tags')
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: pre-commit
    strategy:
      fail-fast: false
      matrix:
        include:
          - {
              python: "3.10",
              os: "ubuntu-latest",
              session: "tests",
              cache-path: ~/.cache/pip,
            }
          - {
              python: "3.9",
              os: "ubuntu-latest",
              session: "tests",
              cache-path: ~/.cache/pip,
            }

    env:
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip
        run: |
          python -m pip install pip
          python -m pip --version

      - name: Cache python environment
        uses: actions/cache@v3
        with:
          path: |
            tests/data/outputs/
            ${{ matrix.cache-path }}
          key: ${{ runner.os }}-python-${{ matrix.python }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install numpy wheel
          python -m pip install -U .[dev]

      - name: Run tests
        run: |
          python -m pytest

  linux-tests:
    name: Tests for Python 3.11 on ubuntu-latest
    runs-on: ubuntu-latest
    needs: pre-commit
    # If not default branch
    # It allows us to not use too much walltime of github
    env:
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: install ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install gfortran

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache python environment
        uses: actions/cache@v3
        # https://tobiasmcnulty.com/posts/caching-pre-commit/
        # This restore and/or save in the same action
        with:
          path: |
            tests/data/outputs/
            ~/.cache/pip
          key: ${{ runner.os }}-python-3.11-pip-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install numpy wheel
          python -m pip install .[dev]

      - name: Run tests
        run: |
          python -m pytest

      - name: Upload artifacts generated by tests
        uses: actions/upload-artifact@v3
        with:
          name: tests-artifacts
          path: tests/data/outputs/

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          files: ./coverage.xml
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  upload-tests-artifacts:
    name: Upload artifacts generated by tests
    runs-on: ubuntu-latest
    needs: linux-tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - uses: actions/upload-artifact@v3
        with:
          name: tests-artifacts
          path: tests/data/outputs/

  test-pypi:
    name: Deploy Package to Test PyPI
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pypa/build
        run: |
          python -m pip install --upgrade build --user

      - name: Build a binary wheel and a source tarball
        run: |
          python -m build --sdist --wheel --outdir dist/ .

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

  pypi:
    name: Deploy Package to PyPI
    # Deploy only tagged commit and if tests have succeeded
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: linux-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pypa/build
        run: |
          python -m pip install --upgrade build --user

      - name: Build a binary wheel and a source tarball
        run: |
          python -m build --sdist --wheel --outdir dist/ .

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
